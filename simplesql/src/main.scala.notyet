package simplesql

import java.{sql => jsql}

import _root_.{ssql => sq}

//ts.read

case class User(id: Int, name: String)

@main def run() = {

  println("starting")

  ssql.transaction("jdbc:sqlite:data.db"){
    ssql.write(sql"""create table if not exists users (
      id int primary key,
      name string not null,
      extra string not null
    )""")

    val str: String = "foobar"
    val w = ssql.write(sql"""insert into users values (2, "admin", $str)""")
    //println(w)
  }

  ssql.transaction("jdbc:sqlite:data.db"){
    println(ssql.read[(Int, String, String)](sql"select * from users"))
    //for (i <- 0 until 1000) {
      //println(ssql.read[Int](sql"select * from foo"))
    //}
  }

}

// trait Context {
//   sql"select from users where user = $a"
// }

// def sql[A <: Tuple](str: String): jsql.Connection => jsql.PreparedStatement = (conn: jsql.Connection) => {
//   conn.prepareStatement(str)
// }


// trait Sql[A] extends (jsql.Connection => jsql.PreparedStatement) {

//   val sql: String

//   def as[T <: Tuple] = ???

//   def results(): Iterator[A]

//   //val withConn(conn: jsql.Connection)

// }
